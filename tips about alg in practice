

《leetcode-cpp》白熊求职 ，9.4和10.12对深度优先和广度优先的框架总结的非常好。 
《算法》第4版红皮书，Robert Sedgewick, 谢路云翻译，算法细节的图形可视化非常好；这本书提供了Java源代码，表3.3.2总结了BST,RedBlackTree,Vector的查找性能（最差和平均）。

https://www.cs.usfca.edu/~galles/visualization/Algorithms.html  算法数据结构的可视化,非常好，包括：BST, AVL , Red-Black Tree,B+ Tree,Trie Tree,Radix Tree, Heap, Disjoint Set; DP , DFS, BFS.

http://sean-parent.stlab.cc/papers-and-presentations#title-better-code-data-structures   Better Code: Data Structures

https://algs4.cs.princeton.edu/home/ 《算法》红皮书第4版配套网站;
https://github.com/lianzeng/algs4  包含《算法》红皮书第4版 所有算法的Java源码和数据，可直接用于商用产品开发，性能也优化过，很容易翻译为C++11 code.

所有的数据结构本质上就是：数组，链表 这2种， 然后组合生成复杂的数据结构，比如 散列表 = 数组+链表， 树 = 链表+多个子节点，

实际工作中用的最多的数据结构是：vector + hashMap(map,unordered_map,set);

数组： 也是一种隐式链表，只不过下一个节点地址不需要记录，通过当前节点直接偏移固定大小得到；
链表： 当前节点记录了下个节点的地址，如果记录了多个节点，就变成了树，比如区间树，B+树，2-3-4树，二叉数
堆： 完全二叉树，父子节点地址可以通过简单公式运算得到，所以可以用数组来实现堆，不用链表；
散列表： = 数组 + 链表 ；很多常数时间的算法都用到了；
树：    有向无环图，有向是指从root->leaf ,  只有1个root节点，不论是DFS（前序，中序，后序，使用栈）还是BFS（使用队列）都不会重复访问；
图：    遍历算法和树类似，因为有环，必须加个标记，避免重复遍历导致死循环；

0.需要掌握的数据结构和算法: 单链表，双向链表，B+树（linux实现的简单），区间树，AVL平衡二叉树，堆（优先级队列），哈希散列表hashMap，bitmap数组，二分查找树，深度优先搜索，广度优先搜索，堆排序/快排/归并排序，KMP字符串匹配。
1.数据结构抽象:  集合（类私有数据）+关系（类操作）.常用操作: 增删查改，维持性质。
2.链表与树:  链表是线性的，树是分叉的, Node节点结构是一样的；
3.树与图: 树是有向无环（根-->叶）且父节点唯一，而且边无权；图是带权边的集合；
 树的本质就是策略选择，
4.散列: 复杂数据映射到简单索引，极大优化查找效率O(1).
5. 数据结构只需要深入掌握树，B树，
6.建议使用尾递归因为经过编译器优化后的效率和非递归的一样好，尾递归使用常量栈空间，反复使用同一个栈帧，不会导致栈溢出。
1.queue:循环buffer, 一个数组+head+tail;
2.stack:数组+topindex; 插入删除都是对top操作；如果容器只在一端操作，就是栈。
3.list:数组+bitmap管理空闲内存；   单向/双向/循环链表； list is a special tree;
  tree + edge ==> graph;
4.tree: 任何一个Node只有1个parent,树是不包含回路的；
6.BST: 左子树的max值小于root, root小于右子树的min值，注意：lchild < root < rchild 这个是必要不充分条件!!
综合了链表的快速插入和有序数组的二分查找，BST的平均性能（查找插入）接近红黑树。

5.平衡搜索树：都是有序树且Key都是unique.
1).AVL树：也是平衡二叉搜索树，实现起来比红黑树简单(也涉及旋转)，但性能貌似不如红黑树，故实际中用的比较少了。参考:https://www.61mon.com/index.php/archives/218/

2)红黑树(黑色平衡的二叉搜索树 )， 由2-3树变形得到(2key node decompose to parent + lchild) , 两者是等价的，可以认为红黑树是2-3树的实现版本，红黑树并非完美平衡，只是黑色节点平衡。
在红黑树的操作中，由易到难的是：查找/修改(修改Value,不能修改Key)---》增加(插入后需要调整达到平衡)---》删除（需要从兄弟节点挪一个过来保持平衡 ）；
理解红黑树的关键是理解旋转。
STL的map/set容器就是用红黑树实现的！

3)B树(M>=4)，多叉平衡搜索树，用于数据库索引，B树的最底层节点包含了所有的Key(从左到右升序排列), B树和普通二叉树的一个区别是B树分为内部节点和外部节点，内部节点{vector[<key, null, node*>]}，外部节点{vector[<key,value,null>]}，内部节点只是索引，外部节点才是真正数据，内部节点是外部节点key的子集，子节点的第1个key和父节点的key相同，B树不删除吗？每个B树节点包含的Key数量范围[M/2, M-1];

4）比较：红黑树中新值是作为新节点插入的，所以树是由上向下生长；B树新值是插入到已存在的叶子节点(external node)，然后饱和分解并向上调整，所以B树是从下往上生长 的。



5.1).Red-Black Tree:红黑树：连接的颜色就是child节点的颜色，新节点是红色的。不存在两个红连接交叉的节点.
插入：新值作为新 leaf节点插入，如果出现红色交叉或者右连接红色则旋转修正; 技巧 : rotate(h)其实是moveDown(h),把h变为child, h->child变为parent, middle节点顺势滑动 ，形象的记忆3节点旋转：【> to <】【< to /】【/ to ^】【\ to ^】【\ to /】;子树旋转后输出一个新的节点，但属性保持不变（newH.color = oldH.color, newH.nodeCount = oldH.nodeCount;  newH is lchild or rchild same as oldH.）; 
struct RBNode{Key, Value, color, lchild, rchild, nodeCount}; //Key is used compare, Value = Data.
插入实现（递归）：和普通的BST插入算法的区别：1）需要返回新的root节点，因为子树调整过；2)插入后追加旋转操作（出现连续红连接），旋转是为了保持和2-3树的对应关系，从而保持平衡，3）每次插入都需要将根节点设为黑色.
接口：h = rotateLeft(h) = moveDown(h);//旋转后返回新的根节点（但左子女还是左子女）。
红黑树的删除比插入更复杂，每次删除都可能要从兄弟节点挪用来保持平衡；

5.2)2-3树：2叉3叉树，一个node的key含1或2个，插入新节点：先找到一个适合的leaf node，然后插入，如果这个node变成3key node则分解为1key node .并且递归向上调整。 注意新值不能直接作为new node插入，必须先插入到已存在的leaf节点。删除节点比较简单，先尝试找一个candidate来补充，如果找不到，则：如果删除K2,直接删除，如果删除K1，则K1=K2, K2=Invalid;如果Node含1个key,则left/right+K1有效，middle无效，如果含2个key,left/middle/right+k1+K2有效，如果含3个key,则需要分解（decompse output={middleValue,lchild,rchild}）, middleValue插入父节点时保持相对位置，验证一个2-3树的插入操作只需要一个简单的ut case(input=1,2,3),看树是否平衡;
实现：用一个fatherMap[],判断child属性(left/middle/right.)




【参考：关于红黑树和2-3树的图形化细节可以参考《算法》红皮书。】

算法：
1.贪心算法比较快，但未必是最优解，所以实际中不太敢用，因为很难证明是最优解 ,  Dijkstra算法是贪心算法而且是最优解，那是有人理论证明了。
动态规划一定能得到最优解，这是实际中用的最多的。
2.递归算法一定是DFS深度优先（包括前序，中序，后序），非递归可以是深度也可以是广度。树有前序，后序，只有二叉树才有中序， 前序遍历最简单，拿到节点立马就可以访问，后序遍历最复杂，因为要等左右子树都访问完后才能访问（注意：这里是左右子树，不是左右子女），技巧：判断当前节点状态，如果是向下递归则缓存（左右子女都没有访问过），如果是回溯则访问。
DFS的后序遍历最适合的场景：在处理完子女节点后需要回溯向上处理途径的所有祖先节点。

3.图树遍历： 树：对于任一节点，只有1个节点指向它；图：对于任一节点，存在多个节点指向它；所以遍历图时要避免重复访问。
   实际问题归约：如果一个问题，向下分解子问题的时候，不重复，那就是树，这时没法用cache加速，如果有重复那就是图，可以用cache加速，本质是动态规划；

4.递归（深搜）有正向和逆向，逆向是从目标状态往起始状态回溯，递归有2种加速策略； 剪枝，缓存；递归的状态转移可以是树或图，如果有重叠的子问题，就是图，则可以用缓存。
5.缓存加速：cache[key] = value, key= problem input = function input , value = result = function output, function 必须是无状态函数，在计算前查询cache, 有初次结果后记录cache, 比如getOrUpdate();

