

merge sort,recursive,non-recursive:  http://www.cyber-dojo.org/kata/edit/4E83487C30?avatar=ray
binary tree traversal DFS,BFS using below framework(and print) : http://www.cyber-dojo.org/kata/edit/68A61E8DFB?avatar=vulture

1.非递归遍历树的基本框架,适用于前序，中序，后序遍历： 比如归并排序 是 后序遍历， 快速排序是前序遍历;
2.BFS(breadth-first-search) = DFS(pre_order) + Fifo_Queue.
3.图和树的遍历框架是一样的，区别是图需要避免重复访问.

void traversal_DFS (root) //valid for tree&&graph.
{
  s.push(root);
  while(!s.empty()) 
  {
    p = s.top(); s.pop(); //s=stack or FIFO_queue or priority_queue;

    if(isLeaf(p)) //叶子节点，开始回溯
    {
      visit(p);    
    }
    else if(isInRecursiveState(p)) //压栈顺序决定了访问顺序.
    {
       //save all childs to container(visit order is opposite to saving order). For graph, need check !visited() before save.
       a) s.push(p); s.push(rchild);s.push(lchild); //post-order traversal
       b) s.push(rchild);s.push(p);s.push(lchild);  //in-order traversal
       c) visit(p),s.push(rchild); s.push(lchild);  //pre-order traversal, since p is visited, no need to save.
    }
    else //assert(isInBacktraceState(p))// hashMap[lchild]==visited || hashMap[rchild]==visited
    {    
       visit(p);
    }
  }//end while
}//end

void traversal_BFS(root) //valid for tree&&graph.
{
  q.push(root) //q = fifo_queue, priority_queue(GreedyBFS)
  while(!q.empty())
  {
    p  = q.pop();
    visit(p);
    childs = getChilds(p); //if binary-tree, childs = lchild + rchild. if graph, childs = adjacent vertex of p.
    for(auto& c : childs)
    {
      if(!visited(c)) //for tree, no need this if().
        q.push(c);
    }
  }
}


bool isInRecursiveState(p)//note: must check childs state, can't check p state,it's wrong to do like this:  return !visited(p);
{
  return !visited(p.lchild) && !visited(p.rchild);
}

void visit(p)
{
  hashMap[p]=visited; //mark p as visited.  hashMap need initialize to unvisited.
  process(p);
}
bool visited(p)
{         if(!isValid(p)) return false;
          return hashMap.find(p) != hashMap.end(); //graph or tree
}
bool isLeaf(p)
{
 return p.lchild == NULL && p.rchild == NULL;
}
