merge sort:  in both recursive and non-recursive(post-order traversal), a good program I've ever made;

c++ source code with unit test:  http://www.cyber-dojo.org/kata/edit/4E83487C30?avatar=ray


非递归遍历树的基本框架,适用于前序，中序，后序遍历： 比如归并排序 是 后序遍历， 快速排序是前序遍历：

s.push(root);
while(!s.empty()) 
{
  p = s.top(); s.pop(); //s=stack or FIFO_queue or priority_queue;
  
  if(isLeaf(p)) //叶子节点，开始回溯
  {
    visit(p);    
  }
  else if(isInRecursiveState(p)) //压栈顺序决定了访问顺序.
  {
     a) s.push(p); s.push(rchild);s.push(lchild); //post-order traversal
     b) s.push(rchild);s.push(p);s.push(lchild);  //in-order traversal
     c) visit(p),s.push(rchild); s.push(lchild);  //pre-order traversal, since p is visited, no need to save.
  }
  else //assert(isInBacktraceState(p))// hashMap[lchild]==visited || hashMap[rchild]==visited
  {    
     visit(p);
  }
  
}

bool isInRecursiveState(p)
{
  return hashMap[p.lchild]==unvisited && hashMap[p.rchild]==unvisited;
}

void visit(p)
{
  hashMap[p]=visited; //mark p as visited.  hashMap need initialize to unvisited.
  process(p);
}

bool isLeaf(p)
{
 return p.lchild == NULL && p.rchild == NULL;
}
